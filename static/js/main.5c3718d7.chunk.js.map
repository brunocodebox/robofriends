{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAgBeA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACE,6BAAKF,IACL,4BAAIC,WC0BGK,EAjCE,SAAC,GAqBhB,OArB6B,EAAZC,OASQC,KAAI,SAACC,GAE5B,OACA,cAAC,EAAD,CAEEP,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,OAHRQ,EAAMP,QCDFQ,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKT,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCIHI,G,MAXA,SAACC,GAGd,OAEE,aADA,CACA,OAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,aCqBEC,E,kDAzBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,8DASHC,EAAOC,GAEvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACN,0DAKFG,KAAKX,MAAMK,a,GAtBQQ,aC2FbC,E,kDA7Db,aAAe,IAAD,8BAEZ,gBAuBFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAxBzC,EAAKX,MAAQ,CACXjB,OAAQ,GACRI,YAAa,IALH,E,gEAUO,IAAD,OAKhByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACtB,OAAQiC,S,+BAqBhC,IAAD,EAEyBZ,KAAKJ,MAA7BjB,EAFD,EAECA,OAAQI,EAFT,EAESA,YAEV8B,EAAiBlC,EAAOmC,QAAO,SAACjC,GACpC,OAAOA,EAAMT,KAAK2C,cAAcC,SAASjC,MAG3C,OAAQJ,EAAOsC,OAGX,sBAAK1C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAQkC,WAP1B,gD,GArDYX,aCfHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c3718d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Card = (props) => {\r\n  // even better\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  // No need to use the index passed in second argument of map\r\n  //const cardComponent = robots.map((robot, i) => {\r\n  \r\n  // Bogus if statement to test the ErrorBoundary component\r\n  // if (true) {\r\n  //   throw Error('NOOOOOOOO!');\r\n  // }\r\n\r\n  const cardArray = robots.map((robot) => {\r\n    // When doing a loop always remember to give a unique key\r\n    return(\r\n    <Card \r\n      key={robot.id} \r\n      id={robot.id}  \r\n      name={robot.name } \r\n      email={robot.email }\r\n      />\r\n    );\r\n});\r\n\r\n  return cardArray;\r\n\r\n  // return(\r\n  //   <div>\r\n  //     <Card id={ robots[0].id}  name={ robots[0].name } email={ robots[0].email }/>\r\n  //     <Card id={ robots[1].id}  name={ robots[1].name } email={ robots[1].email }/>\r\n  //     <Card id={ robots[2].id}  name={ robots[2].name } email={ robots[2].email }/>\r\n  //     <Card id={ robots[3].id}  name={ robots[3].name } email={ robots[3].email }/>\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return(\r\n    <div className='pa2'>\r\n      <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n  // Every props in React are passed by default children\r\n  return (\r\n    // Can return style with object within js expression\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","//import { render } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n// React 16 and above introduced a new lifecycle method equivalent to the try catch block.\r\n// If any error occurs this lefecycle hook will run automatically.\r\ncomponentDidCatch(error, info) {\r\n  // setState will force the render method to run\r\n  this.setState({hasError: true});\r\n}\r\n\r\nrender() {\r\n  if (this.state.hasError) {\r\n    return <h1>Oooops. That is not good</h1>\r\n  }\r\n\r\n  // ErrorBoundary component is expected to sandwich a child component.\r\n  // Here we can return the child component to be rendered.\r\n  return this.props.children;\r\n}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component} from 'react'; // Short hand to reference Component from React\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'; // This will import the font\r\nimport Scroll from '../components/Scroll'; // Scroll the robots so that the Search bar is always visible\r\n\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n// robots must be destructure because the file ./robots may have multiple exports. \r\n// It is not a single export like ./Card file. If there was another const variable\r\n// called say 'cats', then it will have to be dereferenced as well like this: { robots, cats }\r\n// import { robots } from './robots';\r\n\r\n// Now like Flutter , React uses State to pass down information to children.\r\n// A class must be defined to use the State \r\n\r\n// const App = () => {\r\n//   return(\r\n//     <div className='tc'>\r\n//       <h1>RoboFriends</h1>\r\n//       <SearchBox />\r\n//       <CardList robots={robots}/>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\nclass App extends Component {\r\n  // Make use of the constructor to use the State. The constructor is part of the\r\n  // so called life cycle hooks of react. https://reactjs.org/docs/react-component.html\r\n\r\n  // Also be aware that this sort of component with changing state is no 'pure' so they\r\n  // reside in 'containers' folder.\r\n  constructor() {\r\n    // super must be called to be able to use this below\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    };\r\n  }\r\n\r\n  // Notice that arrow function is not used because componentDidMount is part of React\r\n  componentDidMount() {\r\n      // Now load the imported robots from the js file\r\n      //this.setState({robots: robots});\r\n\r\n      // Let's use canned users from json place holder\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({robots: users}));\r\n  }\r\n\r\n  // Careful here !!! \r\n  // 'this' belongs to the input field that triggered the event, not the 'this' of the App.\r\n  // To prevent this make sure to make the event a parameter of a function like so:\r\n  // Change onSearchChange(event) to onSearchChange = (event) => {...}\r\n  // onSearchChange(event) {\r\n  onSearchChange = (event) => {\r\n    // Just like Flutter, now update the state\r\n    this.setState({searchfield: event.target.value});\r\n\r\n    // Filter the robots with name included in the seach field. And later, move this function to the render() function\r\n    // const filteredRobots = this.state.robots.filter((robot) => {\r\n    //   return robot.name.toLowerCase().includes(this.state.searchfield);\r\n    // });\r\n  }\r\n\r\n  // A class has a render function. The robots can now be accessed from the state\r\n  // and not from the imported robots. The App can now change the value of the state\r\n  // pass it down to the children.\r\n  render() {\r\n\r\n    const { robots, searchfield } = this.state;\r\n\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchfield);\r\n    });\r\n\r\n    return !robots.length ? \r\n      <h1>Loading...</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\n//import CardList from './CardList'; // to be the parent of card\nimport App from './containers/App';\n\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; // equivalent to bootstrap\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}